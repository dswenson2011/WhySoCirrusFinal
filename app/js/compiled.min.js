String.prototype.capitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)},function(){var app=angular.module("app.core",["ngMaterial","ngMdIcons","ngMessages","ngRoute","btford.socket-io","md.data.table"]);app.config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("teal").accentPalette("blue-grey")}]),app.factory("socket",["socketFactory",function(socketFactory){return socketFactory()}]),app.run(["$mdToast","$rootScope","socket",function($mdToast,$rootScope,socket){function toast(data){return $mdToast.simple({content:data.message,position:"bottom right"})}socket.on("notification",function(data){$mdToast.show(toast(data))}),$rootScope.$on("notification",function(event,data){$mdToast.show(toast(data))})}]),app.service("observer",function(){var observer=this,observerCallbacks=[];return observer.register=function(service,callback){void 0===observerCallbacks[service]&&(observerCallbacks[service]=[]),observerCallbacks[service].push(callback)},observer.notify=function(service){angular.forEach(observerCallbacks[service],function(callback){callback()})},observer})}(),function(){function routeOption(route){return{controller:route+"Controller",controllerAs:route,templateUrl:"views/partials/"+route+".html"}}function secureRouteOption(route,login){var option=routeOption(route);return option.access={requiresLogin:login},option}var app=angular.module("app.routes",["app.core"]);app.config(["$routeProvider",function($routeProvider){$routeProvider.when("/",routeOption("home")).when("/about",routeOption("about")).when("/account",secureRouteOption("account",!0)).when("/faq",routeOption("faq")).when("/logout",routeOption("logout")).when("/messages",secureRouteOption("messages",!1)).when("/network",secureRouteOption("network",!0)).when("/settings",secureRouteOption("settings",!0)).when("/storage",secureRouteOption("storage",!0)).when("/tasks",secureRouteOption("tasks",!1)).when("/vm",secureRouteOption("vm",!0))}])}(),function(){angular.module("app.authentication",["app.core"]).service("authentication",["$http","$mdDialog","$q","observer",function($http,$mdDialog,$q,observer){var authentication=this,_loggedIn=!1,_authenticated=!1,_token=void 0,_id=void 0,loadingDialog=function(){return $mdDialog.show({clickOutsideToClose:!1,escapeToClose:!1,disableParentScroll:!0,template:'<md-dialog><md-dialog-content><center>Authenticating<br/><md-progress-linear md-mode="indeterminate"></md-progress-linear></center></md-dialog-content></md-dialog>'})},errorDialog=function(){$mdDialog.show({clickOutsideToClose:!0,template:'<md-dialog><md-dialog-content><center><h2 style="font-variant:small-caps;">unauthorized<h2><ng-md-icon style="fill:rgba(237,110,110,1)" icon="lock_outline" size="64"></ng-md-icon></center></md-dialog-content></md-dialog>'})};return authentication.isLoggedIn=function(){return _loggedIn},authentication.isAuthenticated=function(){return _authenticated},authentication.id=function(id){return void 0===id?_id:void(_id=id)},authentication.storeID=function(){localStorage.setItem("id",_id)},authentication.loadID=function(){_token=localStorage.getItem("id")||void 0},authentication.clearID=function(){localStorage.removeItem("id")},authentication.token=function(token){return void 0===token?_token:void(_token=token)},authentication.storeToken=function(){localStorage.setItem("token",_token)},authentication.loadToken=function(){_token=localStorage.getItem("token")||void 0},authentication.clearToken=function(){localStorage.removeItem("token")},authentication.authenticate=function(){var defer=$q.defer();return void 0==authentication.token()&&($mdDialog.hide(),_authenticated=!1,observer.notify("authentication"),defer.reject()),loadingDialog(),$http.post("/login/authenticate",{token:authentication.token()}).success(function(data,status,headers,config){$mdDialog.hide(),_authenticated=!0,observer.notify("authentication"),defer.resolve()}).error(function(err){$mdDialog.hide(),_authenticated=!1,observer.notify("authentication"),errorDialog(),defer.reject()}),defer.promise},authentication.login=function(){function DialogController($scope,$location,$http,$mdDialog,defer){var DialogController=$scope;return DialogController.user={username:"",password:""},DialogController.login=function(){$mdDialog.hide(),loadingDialog(),$http.post("/login",DialogController.user).success(function(data,status,headers,config){$mdDialog.hide(),authentication.id(data.id),authentication.token(data.token),authentication.storeToken(),authentication.storeID(),_loggedIn=!0,_authenticated=!0,observer.notify("authentication"),defer.resolve()}).error(function(err){$mdDialog.hide(),_loggedIn=!1,_authenticated=!1,observer.notify("authentication"),errorDialog(),defer.reject("login")})},DialogController.closeDialog=function(){$mdDialog.hide()},DialogController}var defer=$q.defer();return $mdDialog.show({templateUrl:"views/partials/loginDialog.html",preserveScope:!0,controller:DialogController,locals:{defer:defer}}),defer.promise},authentication.logout=function(){authentication.token(""),authentication.id(""),authentication.clearToken(),authentication.clearID(),_authenticated=!1,_loggedIn=!1,observer.notify("authentication")},authentication}])}(),function(){function datastore($http,observer,$rootScope,authentication,socket){var datastore=this,modelStorage=[];return socket.on("updatedModel",function(data){datastore.get(data.model,data.id)}),datastore.storageLoad=function(mode,id){return modelStorage[mode+id]},datastore.get=function(model,id){$http.get("/api/"+model.capitalizeFirstLetter()+"/"+id).success(function(data,status,headers,config){modelStorage[model+id]=data,observer.notify("datastore")}).error(function(err){$rootScope.$broadcast("notification",{error:!0,message:"Model "+err})})},datastore.update=function(model,object){$http.put("/api/"+model.capitalizeFirstLetter(),{object:object,token:authentication.token()}).success(function(data,status,headers,config){datastore.get(model,object.id),$rootScope.$broadcast("notification",{error:!1,message:"Model updated"})}).error(function(err){$rootScope.$broadcast("notification",{error:!0,message:"Model "+err})})},datastore}var app=angular.module("app.datastore",["app.core","app.authentication"]);app.service("datastore",datastore),datastore.$inject=["$http","observer","$rootScope","authentication","socket"]}(),function(){var app=angular.module("app.layout",["app.core"]);app.service("layout",["$mdSidenav","$mdToast","observer","socket",function($mdSidenav,$mdToast,observer,socket){var layout=this,_page=void 0,_tools=void 0,_dialogs=[];return socket.on("notifcation",function(data){$mdToast.show($mdToast.simple({content:data.message,position:"bottom right"}))}),layout.newDialog=function(name,fn){void 0==_dialogs[name]&&(_dialogs[name]=[]),_dialogs[name].push(fn)},layout.openDialog=function(name){console.log("open"),angular.forEach(_dialogs[name],function(fn){console.log(fn),fn()})},layout.onSwipeLeft=function(sidenav){$mdSidenav(sidenav).open()},layout.onSwipeRight=function(sidenav){$mdSidenav(sidenav).close()},layout.toggleSidenav=function(sidenav){$mdSidenav(sidenav).toggle()},layout.page=function(page){return void 0===page?_page:(_page=page,void observer.notify("layout"))},layout.tools=function(tools){return void 0===tools?_tools:(_tools=tools,void observer.notify("layout"))},layout}])}(),function(){function HomeCtrl(layout){layout.page("Home");var HomeCtrl=this;return HomeCtrl}var app=angular.module("app",["app.core","app.authentication","app.datastore","app.layout","app.routes"]);app.run(["authentication",function(authentication){void 0===authentication.token()&&authentication.loadToken(),void 0===authentication.id()&&authentication.loadID()}]),app.run(["$rootScope","$location","authentication",function($rootScope,$location,authentication){$rootScope.$on("$routeChangeStart",function(event,next){void 0!==next.access&&(authentication.isAuthenticated()?next.access.requiresLogin&&!authentication.isLoggedIn()&&(event.preventDefault(),authentication.login().then(function(){$location.path(next.originalPath)},function(login){void 0!==login&&$location.path("/logout"),$location.path($location.path())})):(event.preventDefault(),authentication.authenticate().then(function(){$location.path(next.originalPath)},function(){authentication.login().then(function(){$location.path(next.originalPath)},function(login){void 0!==login&&$location.path("/logout"),$location.path($location.path())})})))})}]),app.controller("homeController",HomeCtrl),HomeCtrl.$inject=["layout"]}(),function(){function AccountCtrl(datastore,layout,observer){var AccountCtrl=this;return AccountCtrl.logs=[{action:"Create",item:"Test VM",date:"Mon Sep 28 1998 14:36:22 GMT-0700",result:"OK"},{action:"Create",item:"Test VM 3",date:"Mon Sep 28 1999 14:36:22 GMT-0700",result:"OK"},{action:"Create",item:"Test VM 2",date:"Mon Sep 28 1999 14:36:22 GMT-0700",result:"OK"}],layout.page("account"),AccountCtrl}var app=angular.module("app");app.controller("accountController",AccountCtrl),AccountCtrl.$inject=["datastore","layout","observer"]}(),function(){function LogoutCtrl($location,authentication){var LogoutCtrl=this;return authentication.logout(),$location.path("/"),LogoutCtrl}var app=angular.module("app");app.controller("logoutController",LogoutCtrl),LogoutCtrl.$inject=["$location","authentication"]}(),function(){function mainCtrl(authentication,datastore,layout,$location,observer){var userID,mainCtrl=this;return observer.register("authentication",function(){userID=authentication.id(),datastore.get("User",userID)}),observer.register("datastore",function(){mainCtrl.user=datastore.storageLoad("User",userID)}),observer.register("authentication",function(){mainCtrl._authenticated=authentication.isAuthenticated()}),observer.register("layout",function(){mainCtrl.title=layout.page().capitalizeFirstLetter()}),observer.register("layout",function(){mainCtrl.tools=layout.tools()}),mainCtrl.layout=layout,mainCtrl.traverse=function(link){$location.path(link),layout.toggleSidenav("left")},mainCtrl.mainMenu=[{link:"/",title:"Dashboard",icon:"dashboard"},{link:"/about",title:"About",icon:"info_outline"},{link:"/faq",title:"F.A.Q",icon:"question_answer"},{link:"/account",title:"Account",icon:"account_circle"}],mainCtrl.managementMenu=[{link:"/vm",title:"Virtual Machines",icon:"cloud"},{link:"/storage",title:"Virtual Disks",icon:"storage"},{link:"/network",title:"Network Connection",icon:"public"},{link:"/messages",title:"Messages",icon:"message"},{link:"/tasks",title:"Tasks",icon:"list"},{link:"/settings",title:"Settings",icon:"settings"},{link:"/logout",title:"Logout",icon:"logout"}],mainCtrl}var app=angular.module("app");app.controller("MainController",mainCtrl),mainCtrl.$inject=["authentication","datastore","layout","$location","observer"]}(),function(){function SettingsCtrl(datastore,layout,observer){var SettingsCtrl=this;return layout.page("settings"),SettingsCtrl.save=function(Model,Object){datastore.update(Model,Object)},SettingsCtrl}var app=angular.module("app");app.controller("settingsController",SettingsCtrl),SettingsCtrl.$inject=["datastore","layout","observer"]}(),function(){function vmCtrl(layout,$mdBottomSheet,$mdToast){function Test(item){console.log(item)}var vmCtrl=this;return vmCtrl.selected=[],vmCtrl.vms=[],layout.page("Virtual Machines"),layout.newDialog("vmCreate",function(){function bottomCtrl($scope){$scope.launch=function(vm){return void 0==vm.name||void 0==vm.os||void 0==vm.network?void $mdToast.show($mdToast.simple({content:"Warning items are missing!"})):(vm.status="OFF",vmCtrl.vms.push(vm),void $mdBottomSheet.hide())},$scope.close=function(){$mdBottomSheet.hide()}}$mdBottomSheet.show({templateUrl:"views/partials/createVM.tmpl.html",controller:bottomCtrl})}),layout.tools([{action:layout.openDialog,params:"vmCreate",icon:"add",tooltip:{message:"Create new VM",direction:"left"}},{action:Test,params:vmCtrl.selected,icon:"description",tooltip:{message:"View VM",direction:"left"}},{action:layout.openDialog,params:"vmCreate",icon:"delete",tooltip:{message:"Delete VM",direction:"left"}}]),vmCtrl}var app=angular.module("app");app.controller("vmController",vmCtrl),vmCtrl.$inject=["layout","$mdBottomSheet","$mdToast"]}();